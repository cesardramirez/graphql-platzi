# Valida los tipos de nivel para un curso.
enum Level {
  principiante
  intermedio
  avanzado
}

union GlobalSearch = Course | Student | Teacher

type Course {
  _id: ID!
  title: String!
  monitor: String
  description: String!
  topic: String @deprecated
  people: [Student]
  level: Level
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Teacher implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

type Query {  # Documentación del Query.
  "Devuelve todos los cursos."
  courses: [Course]
  "Devuelve un sólo curso."
  course(id: ID!): Course
  "Devuelve todos las personas (estudiantes y profesores)."
  people: [Person]
  "Devuelve una persona."
  person(id: ID!): Person
  # Ejecuta una búsqueda global.
  searchItems(keyword: String!) : [GlobalSearch]
}

# Inputs para los Mutation.
input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}

input CourseEditInput {
  title: String
  teacher: String
  description: String
  topic: String
}

input PersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input PersonEditInput {
  name: String
  email: String
  phone: String
  avatar: String
}

type Mutation {  # Documentación del Mutation.
  "Crea un curso."
  createCourse(input: CourseInput!): Course
  "Editar un curso."
  editCourse(id: ID!, input: CourseEditInput): Course
  "Elimina un curso."
  deleteCourse(id: ID!): Boolean
  "Crea una persona."
  createPerson(input: PersonInput!): Person
  "Editar una persona."
  editPerson(id: ID!, input: PersonEditInput): Person
  "Elimina una persona."
  deletePerson(id: ID!): Boolean
  "Agrega una persona a un curso."
  addPersonToCourse(courseID: ID!, personID: ID!): Course
}
